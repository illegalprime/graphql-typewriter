### Usage

{{exec "node bin/graphql-typewriter.js --help"}}

`{{package.name}}` is assumed to be run in the root folder of a npm-project.
It finds all .graphqls files recursively and adds a .graphqls.ts file next each file
(excluding the `node_modules`-folder).

The source GraphQL-schema `simple-example.graphqls` that looks like

{{include 'examples/simple-example/simple-example.graphqls' 'graphql'}}

will be converted into the following `simple-example.graphqls.ts`:

{{include 'examples/simple-example/simple-example.graphqls.ts' 'ts'}}

Note that all the field (non-argument) types can either be

* the actual type (`Person`),
* a promise for the actual type (`Promise<Person>`),
* a function generating the actual type (`(): Person`), or
* a function generating a Promise (`(): Promise<Person>`)  

which is represented by the interface `GraphqlField` in the generated sources.

For fields with arguments, only the latter two apply.

With this interface, you can write the following program (`usage.ts`):

{{include 'examples/simple-example/usage.ts' }}

The program uses the interface to build an root-implementation that can be validate 
by Typescript (Promise validation works with TypeScript 2.1 onwards).

The output of this program is 

{{exec 'node usage' cwd='examples/simple-example'}}
